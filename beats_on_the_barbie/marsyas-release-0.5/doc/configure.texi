@node Configuring with CMake
@section Configuring with CMake

Marsyas uses CMake to configure and guide its building process. CMake allows
for automatic configuration according to the current platform, as well as
user-configurable building options. It allows you to enable and disable
specific Marsyas features.

After configuration, CMake creates files that contain instructions for the
next step of the building process. This may be:
@itemize
@item Makefiles on Linux, Mac OS X or MinGW
@item Xcode projects on Mac OS X
@item MS Visual Studio solutions on Windows.
@end itemize

@subsection Running CMake

@strong{Note:} The following instructions assume that you have done the
prerequisite steps described in @ref{Step-by-step building instructions}:
@enumerate
@item Obtained Marsyas sources
@item Installed CMake and other prerequisite software
@item Created a @code{build} directory within the top-level Marsyas
directory and navigated your command-line to the @code{build} directory
@end enumerate

There are several ways that configuration using CMake can be performed.

@subsubsection Using CMake GUI

@strong{Note:} On Linux, you will need to install an extra package for the
CMake GUI. On Debian/Ubuntu the package name is @code{cmake-qt-gui}.

You can start CMake GUI either graphically via the list of
applications installed on your system, or by using the 'cmake-gui' command
in the Linux console, OS X Terminal, or Windows Command Prompt.

@itemize

@item If you start it the graphical way, you will need to set the Marsyas
source and build directories manually in the CMake GUI

@item If you start it using the 'cmake-gui' command, you can pass it the
Marsyas source directory as argument, and the current directory will
be used as the build directory. For example, assuming that you are in the
@code{build} directory:

@example
cmake-gui ..
@end example

@end itemize

CMake GUI contains a list of available options: the left column lists option
names, and the right column their editable values. By moving the mouse cursor
over an option name, its description will pop up. To perform configuration,
follow the steps below:

@enumerate

@item If Marsyas has not been configured before, the list of options will be
empty. Click "Configure" to do the initial auto-configuration.

@item Modify options as desired, and click "Configure" again.

@item Once you are satisfied with options, click "Generate" to apply them.

@item You can now exit CMake GUI and proceed with the compilation step of
the building process (see @ref{Step-by-step building instructions}).

@end enumerate


@subsubsection Entirely on command-line

You can also perform CMake configuration entirely on command-line.
Options are controlled by using the 'cmake' command and passing it arguments
of the form "-D" + [option name] + "=" + [value]. Values can be paths to
directories and files, or simply "ON" and "OFF" (or equivalently,
"TRUE" and "FALSE"). Multiple options can be changed using the same command.

For example, assuming that you are in the @code{build} directory:

@example
cmake -DMARSYAS_AUDIOIO=OFF -DMARSYAS_TESTS=ON ..
@end example

After invoking the @code{cmake} command one or multiple times to apply desired
options, you can proceed with the compilation step of the building process
(see @ref{Step-by-step building instructions})


@subsubsection More alternatives

There are more alternative ways to use CMake. Please read detailed instructions
on the CMake website:
@itemize
@item @uref{http://www.cmake.org/cmake/help/runningcmake.html, General instructions}
@item @uref{http://www.cmake.org/cmake/help/v2.8.11/cmake.html#section_Usage, Command-line usage}
@end itemize


@subsection Most prominent options

The following is a list of most important and commonly used options provided
either by Marsyas or CMake itself.


@subsubsection Input / output

@table @code

@item MARSYAS_AUDIOIO
This enables audio input/output.  Requires DirectX on Windows and
either JACK, ALSA or OSS on Linux.  MacOS X audio support is built-in
with the basic developer tools.

@strong{Note:} This option requires C++11 support - in other words,
the WITH_CPP11 option must also be enabled (described below).

@item MARSYAS_MIDIIO
This enables midi input/output.  Requires DirectX on Windows and
either ALSA or OSS on Linux.  MacOS X audio support is built-in
with the basic developer tools.

@end table

@strong{Note:} Audio and MIDI IO support also depend on WITH_JACK, WITH_ALSA,
and WITH_OSS options, described below.


@subsubsection Code messages and optional portions

@table @code

@item MARSYAS_ASSERT
Turns on assertions.

@item MARSYAS_PROFILING
Turns on profiling.

@item MARSYAS_DEBUG
Turns on debugging info (large performance penalty).

@item DISTRIBUTED
(@emph{advanced} option) experimental code for distributed
systems.

@end table


@subsubsection Message logging

These are @emph{advanced} options.

@table @code

@item MARSYAS_LOG_WARNINGS

@item MARSYAS_LOG_DEBUGS

@item MARSYAS_LOG_DIAGNOSTICS

@item MARSYAS_LOG2FILE

@item MARSYAS_LOG2STDOUT

@item MARSYAS_LOG2GUI

@end table


@subsubsection Testing

@table @code
@item MARSYAS_TESTS
Build Marsyas tests, so they can be run using @code{make test}.
@end table


@subsubsection Optional software

All of these options require additional software to be
@strong{installed and properly configured}.

@table @code

@item WITH_CPP11
Enables compilation in C++11 mode. If disabled, Marsyas will be compiled with
limited functionality. Specifically, the audio IO and multi-threading support
require this option to be enabled.

This option requires a compiler with adequate C++11 support.
Minimum required compiler versions are ensured by CMake, and reported if not
satisfied.

@item WITH_MAD
mp3 audio decoding with
@uref{http://sourceforge.net/projects/mad/, LibMAD}

@item WITH_VORBIS
ogg vorbis audio decoding with libvorbis - it requires

@item WITH_MATLAB
Builds the MATLAB engine interface.

@item WITH_SWIG
Builds SWIG bindings.  This option enables the following
sub-options: WITH_SWIG_PYTHON, WITH_SWIG_JAVA, WITH_SWIG_LUA, and
WITH_SWIG_RUBY.
@table @code
@item WITH_SWIG_PYTHON
Use Swig to generate Python bindings
@item WITH_SWIG_JAVA
Use Swig to generate Java bindings
@item WITH_SWIG_LUA
Use Swig to generate Lua bindings
@item WITH_SWIG_RUBY
Use Swig to generate Ruby bindings
@end table


@item WITH_QT5
Builds the Qt5 GUI applications. Most Marsyas GUI applications are of this type.
Requires Qt 5.0 or higher.

@item WITH_QT
Builds the Qt4 GUI applications. There are only a few unmaintained Marsyas GUI
applications of this type, preserved mostly for inspiration.
Requires Qt 4.2.3 or higher.


@item WITH_VAMP
Build plugins for Vamp (see @ref{SonicVisualiser Vamp Plugins} for more information).

@item WITH_GSTREAMER
Use GStreamer as an audio source

@end table

Linux-specific:

@table @code
@item WITH_JACK
Enables audio IO using JACK, if available.
@item WITH_ALSA
Enables audio and MIDI IO using ALSA, if available.
@item WITH_OSS
Enables audio and MIDI IO using OSS, if available.
@end table


@subsubsection Documentation

@table @code

@item MARSYAS_DOCUMENTATION_ONLY
If enabled, only build documentation, not program sources. This allows to
build documentation without even the presence of a compiler or any requirements
related to program code.

@end table
