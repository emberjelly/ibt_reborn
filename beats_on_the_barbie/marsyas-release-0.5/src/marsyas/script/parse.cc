// Generated by Bisonc++ V4.04.01 on Wed, 09 Apr 2014 13:45:01 -0700

// $insert class.ih
#include "parser_impl.h"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {279, 0}, // 1: input ->  <empty>
     {279, 2}, // 2: input ->  directives actor_instance
     {280, 0}, // 3: directives ->  <empty>
     {280, 2}, // 4: directives ->  directives directive_line
     {282, 3}, // 5: directive_line ('#') ->  '#' directive '\x0a'
     {283, 1}, // 6: directive ->  include_directive
     {284, 2}, // 7: include_directive (INCLUDE) ->  INCLUDE directive_arg
     {284, 4}, // 8: include_directive (INCLUDE) ->  INCLUDE directive_arg AS id
     {281, 2}, // 9: actor_instance ->  actor_instance_decl actor_def
     {289, 2}, // 10: actor_prototype ->  actor_prototype_decl actor_def
     {287, 1}, // 11: actor_instance_decl ->  id
     {287, 3}, // 12: actor_instance_decl (':') ->  id ':' id
     {287, 3}, // 13: actor_instance_decl (':') ->  id ':' string
     {290, 3}, // 14: actor_prototype_decl (':') ->  id ':' id
     {290, 3}, // 15: actor_prototype_decl (':') ->  id ':' string
     {288, 0}, // 16: actor_def ->  <empty>
     {288, 3}, // 17: actor_def ('{') ->  '{' actor_def_list '}'
     {292, 0}, // 18: actor_def_list ->  <empty>
     {292, 2}, // 19: actor_def_list ->  actor_def_list actor_def_element
     {293, 2}, // 20: actor_def_element (ARROW) ->  ARROW actor_instance
     {293, 2}, // 21: actor_def_element ('~') ->  '~' actor_prototype
     {293, 1}, // 22: actor_def_element ->  control_def
     {293, 1}, // 23: actor_def_element ->  state
     {294, 5}, // 24: control_def ('+') ->  '+' access_spec id '=' control_value
     {294, 4}, // 25: control_def ('+') ->  '+' id '=' control_value
     {294, 4}, // 26: control_def ('=') ->  access_spec id '=' control_value
     {294, 3}, // 27: control_def ('=') ->  id '=' control_value
     {294, 2}, // 28: control_def ->  access_spec id
     {298, 3}, // 29: remote_control_assignment ('=') ->  path '=' control_value
     {296, 1}, // 30: access_spec (PUBLIC) ->  PUBLIC
     {297, 1}, // 31: control_value ->  bool
     {297, 1}, // 32: control_value ->  int
     {297, 1}, // 33: control_value ->  real
     {297, 1}, // 34: control_value ->  matrix
     {297, 1}, // 35: control_value ->  string
     {297, 1}, // 36: control_value ->  path
     {297, 3}, // 37: control_value ('(') ->  '(' operation ')'
     {295, 8}, // 38: state (WHEN) ->  WHEN '(' operation ')' '{' state_def '}' else_state
     {306, 0}, // 39: else_state ->  <empty>
     {306, 4}, // 40: else_state (ELSE) ->  ELSE '{' state_def '}'
     {305, 0}, // 41: state_def ->  <empty>
     {305, 2}, // 42: state_def ->  state_def remote_control_assignment
     {303, 3}, // 43: matrix ('[') ->  '[' matrix_contents ']'
     {307, 0}, // 44: matrix_contents ->  <empty>
     {307, 1}, // 45: matrix_contents ->  matrix_row
     {307, 3}, // 46: matrix_contents (';') ->  matrix_contents ';' matrix_row
     {308, 1}, // 47: matrix_row ->  matrix_value
     {308, 3}, // 48: matrix_row (',') ->  matrix_row ',' matrix_value
     {309, 1}, // 49: matrix_value ->  real
     {309, 1}, // 50: matrix_value ->  int
     {304, 1}, // 51: operation ->  operation_value
     {304, 3}, // 52: operation (COMPARE) ->  operation compare operation
     {304, 3}, // 53: operation (CLOCK) ->  operation clock operation
     {304, 3}, // 54: operation (MATH1) ->  operation math1 operation
     {304, 3}, // 55: operation (MATH2) ->  operation math2 operation
     {304, 3}, // 56: operation ('(') ->  '(' operation ')'
     {311, 1}, // 57: compare (EQ) ->  EQ
     {311, 1}, // 58: compare (NEQ) ->  NEQ
     {311, 1}, // 59: compare (LESS) ->  LESS
     {311, 1}, // 60: compare (MORE) ->  MORE
     {312, 1}, // 61: clock (WHEN) ->  WHEN
     {312, 1}, // 62: clock (ON) ->  ON
     {313, 1}, // 63: math1 ('+') ->  '+'
     {313, 1}, // 64: math1 ('-') ->  '-'
     {314, 1}, // 65: math2 ('*') ->  '*'
     {314, 1}, // 66: math2 ('/') ->  '/'
     {310, 1}, // 67: operation_value ->  bool
     {310, 1}, // 68: operation_value ->  int
     {310, 1}, // 69: operation_value ->  real
     {310, 1}, // 70: operation_value ->  matrix
     {310, 1}, // 71: operation_value ->  string
     {310, 1}, // 72: operation_value ->  path
     {300, 1}, // 73: bool (BOOL) ->  BOOL
     {301, 1}, // 74: int (INT) ->  INT
     {302, 1}, // 75: real (REAL) ->  REAL
     {291, 1}, // 76: string (STRING) ->  STRING
     {286, 1}, // 77: id (ID) ->  ID
     {299, 1}, // 78: path ->  id
     {299, 1}, // 79: path (PATH) ->  PATH
     {285, 1}, // 80: directive_arg (DIRECTIVE_ARG) ->  DIRECTIVE_ARG
     {315, 1}, // 81: input_$ ->  input
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_DEF}, {  4} },              
    { {     279}, {  1} }, // input     
    { {     280}, {  2} }, // directives
    { {   _EOF_}, { -1} }, // _EOF_     
    { {       0}, { -3} },              
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_TOKEN}, { 7} },                       
    { {       281}, { 3} }, // actor_instance     
    { {       282}, { 4} }, // directive_line     
    { {       287}, { 5} }, // actor_instance_decl
    { {        35}, { 6} }, // '#'                
    { {       286}, { 7} }, // id                 
    { {       261}, { 8} }, // ID                 
    { {         0}, { 0} },                       
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_5[] =
{
    { { REQ_DEF}, {   3} },             
    { {     288}, {   9} }, // actor_def
    { {     123}, {  10} }, // '{'      
    { {       0}, { -16} },             
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, {  4} },                     
    { {       283}, { 11} }, // directive        
    { {       284}, { 12} }, // include_directive
    { {       264}, { 13} }, // INCLUDE          
    { {         0}, {  0} },                     
};

SR__ s_7[] =
{
    { { REQ_DEF}, {   2} },       
    { {      58}, {  14} }, // ':'
    { {       0}, { -11} },       
};

SR__ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {   2} },                  
    { {     292}, {  15} }, // actor_def_list
    { {       0}, { -18} },                  
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {        10}, { 16} }, // '\x0a'
    { {         0}, {  0} },          
};

SR__ s_12[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  3} },                 
    { {       285}, { 17} }, // directive_arg
    { {       266}, { 18} }, // DIRECTIVE_ARG
    { {         0}, {  0} },                 
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  5} },          
    { {       286}, { 19} }, // id    
    { {       291}, { 20} }, // string
    { {       261}, {  8} }, // ID    
    { {       259}, { 21} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, { 13} },                     
    { {       125}, { 22} }, // '}'              
    { {       293}, { 23} }, // actor_def_element
    { {       263}, { 24} }, // ARROW            
    { {       126}, { 25} }, // '~'              
    { {       294}, { 26} }, // control_def      
    { {       295}, { 27} }, // state            
    { {        43}, { 28} }, // '+'              
    { {       296}, { 29} }, // access_spec      
    { {       286}, { 30} }, // id               
    { {       274}, { 31} }, // WHEN             
    { {       267}, { 32} }, // PUBLIC           
    { {       261}, {  8} }, // ID               
    { {         0}, {  0} },                     
};

SR__ s_16[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_17[] =
{
    { { REQ_DEF}, {  2} },      
    { {     265}, { 33} }, // AS
    { {       0}, { -7} },      
};

SR__ s_18[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, {  5} },                       
    { {       281}, { 34} }, // actor_instance     
    { {       287}, {  5} }, // actor_instance_decl
    { {       286}, {  7} }, // id                 
    { {       261}, {  8} }, // ID                 
    { {         0}, {  0} },                       
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, {  5} },                        
    { {       289}, { 35} }, // actor_prototype     
    { {       290}, { 36} }, // actor_prototype_decl
    { {       286}, { 37} }, // id                  
    { {       261}, {  8} }, // ID                  
    { {         0}, {  0} },                        
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  5} },               
    { {       296}, { 38} }, // access_spec
    { {       286}, { 39} }, // id         
    { {       267}, { 32} }, // PUBLIC     
    { {       261}, {  8} }, // ID         
    { {         0}, {  0} },               
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  3} },      
    { {       286}, { 40} }, // id
    { {       261}, {  8} }, // ID
    { {         0}, {  0} },      
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        61}, { 41} }, // '='
    { {         0}, {  0} },       
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 42} }, // '('
    { {         0}, {  0} },       
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, {  3} },      
    { {       286}, { 43} }, // id
    { {       261}, {  8} }, // ID
    { {         0}, {  0} },      
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_36[] =
{
    { { REQ_DEF}, {   3} },             
    { {     288}, {  44} }, // actor_def
    { {     123}, {  10} }, // '{'      
    { {       0}, { -16} },             
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        58}, { 45} }, // ':'
    { {         0}, {  0} },       
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {  3} },      
    { {       286}, { 46} }, // id
    { {       261}, {  8} }, // ID
    { {         0}, {  0} },      
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        61}, { 47} }, // '='
    { {         0}, {  0} },       
};

SR__ s_40[] =
{
    { { REQ_DEF}, {   2} },       
    { {      61}, {  48} }, // '='
    { {       0}, { -28} },       
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, { 17} },                 
    { {       297}, { 49} }, // control_value
    { {       300}, { 50} }, // bool         
    { {       301}, { 51} }, // int          
    { {       302}, { 52} }, // real         
    { {       303}, { 53} }, // matrix       
    { {       291}, { 54} }, // string       
    { {       299}, { 55} }, // path         
    { {        40}, { 56} }, // '('          
    { {       260}, { 57} }, // BOOL         
    { {       257}, { 58} }, // INT          
    { {       258}, { 59} }, // REAL         
    { {        91}, { 60} }, // '['          
    { {       259}, { 21} }, // STRING       
    { {       286}, { 61} }, // id           
    { {       262}, { 62} }, // PATH         
    { {       261}, {  8} }, // ID           
    { {         0}, {  0} },                 
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, { 18} },                   
    { {       304}, { 63} }, // operation      
    { {       310}, { 64} }, // operation_value
    { {        40}, { 65} }, // '('            
    { {       300}, { 66} }, // bool           
    { {       301}, { 67} }, // int            
    { {       302}, { 68} }, // real           
    { {       303}, { 69} }, // matrix         
    { {       291}, { 70} }, // string         
    { {       299}, { 71} }, // path           
    { {       260}, { 57} }, // BOOL           
    { {       257}, { 58} }, // INT            
    { {       258}, { 59} }, // REAL           
    { {        91}, { 60} }, // '['            
    { {       259}, { 21} }, // STRING         
    { {       286}, { 61} }, // id             
    { {       262}, { 62} }, // PATH           
    { {       261}, {  8} }, // ID             
    { {         0}, {  0} },                   
};

SR__ s_43[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, {  5} },          
    { {       286}, { 72} }, // id    
    { {       291}, { 73} }, // string
    { {       261}, {  8} }, // ID    
    { {       259}, { 21} }, // STRING
    { {         0}, {  0} },          
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        61}, { 74} }, // '='
    { {         0}, {  0} },       
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, { 17} },                 
    { {       297}, { 75} }, // control_value
    { {       300}, { 50} }, // bool         
    { {       301}, { 51} }, // int          
    { {       302}, { 52} }, // real         
    { {       303}, { 53} }, // matrix       
    { {       291}, { 54} }, // string       
    { {       299}, { 55} }, // path         
    { {        40}, { 56} }, // '('          
    { {       260}, { 57} }, // BOOL         
    { {       257}, { 58} }, // INT          
    { {       258}, { 59} }, // REAL         
    { {        91}, { 60} }, // '['          
    { {       259}, { 21} }, // STRING       
    { {       286}, { 61} }, // id           
    { {       262}, { 62} }, // PATH         
    { {       261}, {  8} }, // ID           
    { {         0}, {  0} },                 
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, { 17} },                 
    { {       297}, { 76} }, // control_value
    { {       300}, { 50} }, // bool         
    { {       301}, { 51} }, // int          
    { {       302}, { 52} }, // real         
    { {       303}, { 53} }, // matrix       
    { {       291}, { 54} }, // string       
    { {       299}, { 55} }, // path         
    { {        40}, { 56} }, // '('          
    { {       260}, { 57} }, // BOOL         
    { {       257}, { 58} }, // INT          
    { {       258}, { 59} }, // REAL         
    { {        91}, { 60} }, // '['          
    { {       259}, { 21} }, // STRING       
    { {       286}, { 61} }, // id           
    { {       262}, { 62} }, // PATH         
    { {       261}, {  8} }, // ID           
    { {         0}, {  0} },                 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, { 18} },                   
    { {       304}, { 77} }, // operation      
    { {       310}, { 64} }, // operation_value
    { {        40}, { 65} }, // '('            
    { {       300}, { 66} }, // bool           
    { {       301}, { 67} }, // int            
    { {       302}, { 68} }, // real           
    { {       303}, { 69} }, // matrix         
    { {       291}, { 70} }, // string         
    { {       299}, { 71} }, // path           
    { {       260}, { 57} }, // BOOL           
    { {       257}, { 58} }, // INT            
    { {       258}, { 59} }, // REAL           
    { {        91}, { 60} }, // '['            
    { {       259}, { 21} }, // STRING         
    { {       286}, { 61} }, // id             
    { {       262}, { 62} }, // PATH           
    { {       261}, {  8} }, // ID             
    { {         0}, {  0} },                   
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_60[] =
{
    { { REQ_DEF}, {   8} },                   
    { {     307}, {  78} }, // matrix_contents
    { {     308}, {  79} }, // matrix_row     
    { {     309}, {  80} }, // matrix_value   
    { {     302}, {  81} }, // real           
    { {     301}, {  82} }, // int            
    { {     258}, {  59} }, // REAL           
    { {     257}, {  58} }, // INT            
    { {       0}, { -44} },                   
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_62[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, { 16} },           
    { {        41}, { 83} }, // ')'    
    { {       311}, { 84} }, // compare
    { {       312}, { 85} }, // clock  
    { {       313}, { 86} }, // math1  
    { {       314}, { 87} }, // math2  
    { {       269}, { 88} }, // EQ     
    { {       270}, { 89} }, // NEQ    
    { {       271}, { 90} }, // LESS   
    { {       272}, { 91} }, // MORE   
    { {       274}, { 92} }, // WHEN   
    { {       275}, { 93} }, // ON     
    { {        43}, { 94} }, // '+'    
    { {        45}, { 95} }, // '-'    
    { {        42}, { 96} }, // '*'    
    { {        47}, { 97} }, // '/'    
    { {         0}, {  0} },           
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, { 18} },                   
    { {       304}, { 98} }, // operation      
    { {       310}, { 64} }, // operation_value
    { {        40}, { 65} }, // '('            
    { {       300}, { 66} }, // bool           
    { {       301}, { 67} }, // int            
    { {       302}, { 68} }, // real           
    { {       303}, { 69} }, // matrix         
    { {       291}, { 70} }, // string         
    { {       299}, { 71} }, // path           
    { {       260}, { 57} }, // BOOL           
    { {       257}, { 58} }, // INT            
    { {       258}, { 59} }, // REAL           
    { {        91}, { 60} }, // '['            
    { {       259}, { 21} }, // STRING         
    { {       286}, { 61} }, // id             
    { {       262}, { 62} }, // PATH           
    { {       261}, {  8} }, // ID             
    { {         0}, {  0} },                   
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, { 17} },                 
    { {       297}, { 99} }, // control_value
    { {       300}, { 50} }, // bool         
    { {       301}, { 51} }, // int          
    { {       302}, { 52} }, // real         
    { {       303}, { 53} }, // matrix       
    { {       291}, { 54} }, // string       
    { {       299}, { 55} }, // path         
    { {        40}, { 56} }, // '('          
    { {       260}, { 57} }, // BOOL         
    { {       257}, { 58} }, // INT          
    { {       258}, { 59} }, // REAL         
    { {        91}, { 60} }, // '['          
    { {       259}, { 21} }, // STRING       
    { {       286}, { 61} }, // id           
    { {       262}, { 62} }, // PATH         
    { {       261}, {  8} }, // ID           
    { {         0}, {  0} },                 
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {  16} },           
    { {        41}, { 100} }, // ')'    
    { {       311}, {  84} }, // compare
    { {       312}, {  85} }, // clock  
    { {       313}, {  86} }, // math1  
    { {       314}, {  87} }, // math2  
    { {       269}, {  88} }, // EQ     
    { {       270}, {  89} }, // NEQ    
    { {       271}, {  90} }, // LESS   
    { {       272}, {  91} }, // MORE   
    { {       274}, {  92} }, // WHEN   
    { {       275}, {  93} }, // ON     
    { {        43}, {  94} }, // '+'    
    { {        45}, {  95} }, // '-'    
    { {        42}, {  96} }, // '*'    
    { {        47}, {  97} }, // '/'    
    { {         0}, {   0} },           
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        93}, { 101} }, // ']'
    { {        59}, { 102} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_79[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 103} }, // ','
    { {       0}, { -45} },       
};

SR__ s_80[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 104} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {  18} },                   
    { {       304}, { 105} }, // operation      
    { {       310}, {  64} }, // operation_value
    { {        40}, {  65} }, // '('            
    { {       300}, {  66} }, // bool           
    { {       301}, {  67} }, // int            
    { {       302}, {  68} }, // real           
    { {       303}, {  69} }, // matrix         
    { {       291}, {  70} }, // string         
    { {       299}, {  71} }, // path           
    { {       260}, {  57} }, // BOOL           
    { {       257}, {  58} }, // INT            
    { {       258}, {  59} }, // REAL           
    { {        91}, {  60} }, // '['            
    { {       259}, {  21} }, // STRING         
    { {       286}, {  61} }, // id             
    { {       262}, {  62} }, // PATH           
    { {       261}, {   8} }, // ID             
    { {         0}, {   0} },                   
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  18} },                   
    { {       304}, { 106} }, // operation      
    { {       310}, {  64} }, // operation_value
    { {        40}, {  65} }, // '('            
    { {       300}, {  66} }, // bool           
    { {       301}, {  67} }, // int            
    { {       302}, {  68} }, // real           
    { {       303}, {  69} }, // matrix         
    { {       291}, {  70} }, // string         
    { {       299}, {  71} }, // path           
    { {       260}, {  57} }, // BOOL           
    { {       257}, {  58} }, // INT            
    { {       258}, {  59} }, // REAL           
    { {        91}, {  60} }, // '['            
    { {       259}, {  21} }, // STRING         
    { {       286}, {  61} }, // id             
    { {       262}, {  62} }, // PATH           
    { {       261}, {   8} }, // ID             
    { {         0}, {   0} },                   
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  18} },                   
    { {       304}, { 107} }, // operation      
    { {       310}, {  64} }, // operation_value
    { {        40}, {  65} }, // '('            
    { {       300}, {  66} }, // bool           
    { {       301}, {  67} }, // int            
    { {       302}, {  68} }, // real           
    { {       303}, {  69} }, // matrix         
    { {       291}, {  70} }, // string         
    { {       299}, {  71} }, // path           
    { {       260}, {  57} }, // BOOL           
    { {       257}, {  58} }, // INT            
    { {       258}, {  59} }, // REAL           
    { {        91}, {  60} }, // '['            
    { {       259}, {  21} }, // STRING         
    { {       286}, {  61} }, // id             
    { {       262}, {  62} }, // PATH           
    { {       261}, {   8} }, // ID             
    { {         0}, {   0} },                   
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {  18} },                   
    { {       304}, { 108} }, // operation      
    { {       310}, {  64} }, // operation_value
    { {        40}, {  65} }, // '('            
    { {       300}, {  66} }, // bool           
    { {       301}, {  67} }, // int            
    { {       302}, {  68} }, // real           
    { {       303}, {  69} }, // matrix         
    { {       291}, {  70} }, // string         
    { {       299}, {  71} }, // path           
    { {       260}, {  57} }, // BOOL           
    { {       257}, {  58} }, // INT            
    { {       258}, {  59} }, // REAL           
    { {        91}, {  60} }, // '['            
    { {       259}, {  21} }, // STRING         
    { {       286}, {  61} }, // id             
    { {       262}, {  62} }, // PATH           
    { {       261}, {   8} }, // ID             
    { {         0}, {   0} },                   
};

SR__ s_88[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_89[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_90[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_91[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_93[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {  16} },           
    { {        41}, { 109} }, // ')'    
    { {       311}, {  84} }, // compare
    { {       312}, {  85} }, // clock  
    { {       313}, {  86} }, // math1  
    { {       314}, {  87} }, // math2  
    { {       269}, {  88} }, // EQ     
    { {       270}, {  89} }, // NEQ    
    { {       271}, {  90} }, // LESS   
    { {       272}, {  91} }, // MORE   
    { {       274}, {  92} }, // WHEN   
    { {       275}, {  93} }, // ON     
    { {        43}, {  94} }, // '+'    
    { {        45}, {  95} }, // '-'    
    { {        42}, {  96} }, // '*'    
    { {        47}, {  97} }, // '/'    
    { {         0}, {   0} },           
};

SR__ s_99[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {   7} },                
    { {       308}, { 110} }, // matrix_row  
    { {       309}, {  80} }, // matrix_value
    { {       302}, {  81} }, // real        
    { {       301}, {  82} }, // int         
    { {       258}, {  59} }, // REAL        
    { {       257}, {  58} }, // INT         
    { {         0}, {   0} },                
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {   6} },                
    { {       309}, { 111} }, // matrix_value
    { {       302}, {  81} }, // real        
    { {       301}, {  82} }, // int         
    { {       258}, {  59} }, // REAL        
    { {       257}, {  58} }, // INT         
    { {         0}, {   0} },                
};

SR__ s_104[] =
{
    { { DEF_RED}, {   2} },             
    { {     305}, { 112} }, // state_def
    { {       0}, { -41} },             
};

SR__ s_105[] =
{
    { { REQ_DEF}, {  11} },           
    { {     311}, {  84} }, // compare
    { {     312}, {  85} }, // clock  
    { {     313}, {  86} }, // math1  
    { {     314}, {  87} }, // math2  
    { {     274}, {  92} }, // WHEN   
    { {     275}, {  93} }, // ON     
    { {      43}, {  94} }, // '+'    
    { {      45}, {  95} }, // '-'    
    { {      42}, {  96} }, // '*'    
    { {      47}, {  97} }, // '/'    
    { {       0}, { -52} },           
};

SR__ s_106[] =
{
    { { REQ_DEF}, {   9} },           
    { {     311}, {  84} }, // compare
    { {     312}, {  85} }, // clock  
    { {     313}, {  86} }, // math1  
    { {     314}, {  87} }, // math2  
    { {      43}, {  94} }, // '+'    
    { {      45}, {  95} }, // '-'    
    { {      42}, {  96} }, // '*'    
    { {      47}, {  97} }, // '/'    
    { {       0}, { -53} },           
};

SR__ s_107[] =
{
    { { REQ_DEF}, {   7} },           
    { {     311}, {  84} }, // compare
    { {     312}, {  85} }, // clock  
    { {     313}, {  86} }, // math1  
    { {     314}, {  87} }, // math2  
    { {      42}, {  96} }, // '*'    
    { {      47}, {  97} }, // '/'    
    { {       0}, { -54} },           
};

SR__ s_108[] =
{
    { { REQ_DEF}, {   5} },           
    { {     311}, {  84} }, // compare
    { {     312}, {  85} }, // clock  
    { {     313}, {  86} }, // math1  
    { {     314}, {  87} }, // math2  
    { {       0}, { -55} },           
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_110[] =
{
    { { REQ_DEF}, {   2} },       
    { {      44}, { 103} }, // ','
    { {       0}, { -46} },       
};

SR__ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_112[] =
{
    { { REQ_TOKEN}, {   7} },                             
    { {       125}, { 113} }, // '}'                      
    { {       298}, { 114} }, // remote_control_assignment
    { {       299}, { 115} }, // path                     
    { {       286}, {  61} }, // id                       
    { {       262}, {  62} }, // PATH                     
    { {       261}, {   8} }, // ID                       
    { {         0}, {   0} },                             
};

SR__ s_113[] =
{
    { { REQ_DEF}, {   3} },              
    { {     306}, { 116} }, // else_state
    { {     276}, { 117} }, // ELSE      
    { {       0}, { -39} },              
};

SR__ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_115[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        61}, { 118} }, // '='
    { {         0}, {   0} },       
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_117[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       123}, { 119} }, // '{'
    { {         0}, {   0} },       
};

SR__ s_118[] =
{
    { { REQ_TOKEN}, {  17} },                 
    { {       297}, { 120} }, // control_value
    { {       300}, {  50} }, // bool         
    { {       301}, {  51} }, // int          
    { {       302}, {  52} }, // real         
    { {       303}, {  53} }, // matrix       
    { {       291}, {  54} }, // string       
    { {       299}, {  55} }, // path         
    { {        40}, {  56} }, // '('          
    { {       260}, {  57} }, // BOOL         
    { {       257}, {  58} }, // INT          
    { {       258}, {  59} }, // REAL         
    { {        91}, {  60} }, // '['          
    { {       259}, {  21} }, // STRING       
    { {       286}, {  61} }, // id           
    { {       262}, {  62} }, // PATH         
    { {       261}, {   8} }, // ID           
    { {         0}, {   0} },                 
};

SR__ s_119[] =
{
    { { DEF_RED}, {   2} },             
    { {     305}, { 121} }, // state_def
    { {       0}, { -41} },             
};

SR__ s_120[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {   7} },                             
    { {       125}, { 122} }, // '}'                      
    { {       298}, { 114} }, // remote_control_assignment
    { {       299}, { 115} }, // path                     
    { {       286}, {  61} }, // id                       
    { {       262}, {  62} }, // PATH                     
    { {       261}, {   8} }, // ID                       
    { {         0}, {   0} },                             
};

SR__ s_122[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,
};

} // anonymous namespace ends


// $insert namespace-open
namespace Marsyas
{

// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 2:
#line 21 "parser.y"
        { d_directives = d_vsp__[-1]; d_actor = d_vsp__[0]; }
        break;

        case 4:
#line 27 "parser.y"
        {
         d_vsp__[-1].components.push_back(d_vsp__[0]);
         d_val__ = d_vsp__[-1];
        }
        break;

        case 5:
#line 35 "parser.y"
        {
        d_val__ = d_vsp__[-1];
        }
        break;

        case 6:
#line 41 "parser.y"
        { d_val__ = d_vsp__[0]; d_val__.tag = INCLUDE_DIRECTIVE; }
        break;

        case 7:
#line 46 "parser.y"
        {
        d_val__ = node();
        d_val__.components = {d_vsp__[0]};
        }
        break;

        case 8:
#line 52 "parser.y"
        {
        d_val__ = node();
        d_val__.components = {d_vsp__[-2], d_vsp__[0]};
        }
        break;

        case 9:
#line 61 "parser.y"
        {
         d_val__ = node();
         d_val__.tag = ACTOR_NODE;
         d_val__.components = { d_vsp__[-1].components[0], d_vsp__[-1].components[1], d_vsp__[0] };
        }
        break;

        case 10:
#line 70 "parser.y"
        {
         d_val__ = node();
         d_val__.tag = PROTOTYPE_NODE;
         d_val__.components = { d_vsp__[-1].components[0], d_vsp__[-1].components[1], d_vsp__[0] };
        }
        break;

        case 11:
#line 79 "parser.y"
        { d_val__ = node(); d_val__.components = {node(), d_vsp__[0]}; }
        break;

        case 12:
#line 82 "parser.y"
        { d_val__ = node(); d_val__.components = {d_vsp__[-2], d_vsp__[0]}; }
        break;

        case 13:
#line 85 "parser.y"
        { d_val__ = node(); d_val__.components = {d_vsp__[-2], d_vsp__[0]}; }
        break;

        case 14:
#line 91 "parser.y"
        { d_val__ = node(); d_val__.components = {d_vsp__[-2], d_vsp__[0]}; }
        break;

        case 15:
#line 94 "parser.y"
        { d_val__ = node(); d_val__.components = {d_vsp__[-2], d_vsp__[0]}; }
        break;

        case 17:
#line 100 "parser.y"
        { d_val__ = d_vsp__[-1]; }
        break;

        case 19:
#line 107 "parser.y"
        {
         d_vsp__[-1].components.push_back(d_vsp__[0]);
         d_val__ = d_vsp__[-1];
        }
        break;

        case 20:
#line 115 "parser.y"
        { d_val__ = d_vsp__[0]; }
        break;

        case 21:
#line 117 "parser.y"
        { d_val__ = d_vsp__[0]; }
        break;

        case 24:
#line 126 "parser.y"
        {
        d_val__ = node(CONTROL_DEF_NODE);
        d_val__.components = { true, d_vsp__[-3], d_vsp__[-2], d_vsp__[0] };
        }
        break;

        case 25:
#line 132 "parser.y"
        {
        d_val__ = node(CONTROL_DEF_NODE);
        d_val__.components = { true, false, d_vsp__[-2], d_vsp__[0] };
        }
        break;

        case 26:
#line 138 "parser.y"
        {
        d_val__ = node(CONTROL_DEF_NODE);
        d_val__.components = { false, d_vsp__[-3], d_vsp__[-2], d_vsp__[0] };
        }
        break;

        case 27:
#line 144 "parser.y"
        {
        d_val__ = node(CONTROL_DEF_NODE);
        d_val__.components = { false, false, d_vsp__[-2], d_vsp__[0] };
        }
        break;

        case 28:
#line 150 "parser.y"
        {
        d_val__ = node(CONTROL_DEF_NODE);
        d_val__.components = { false, d_vsp__[-1], d_vsp__[0] };
        }
        break;

        case 29:
#line 158 "parser.y"
        {
        d_val__ = node(CONTROL_ASSIGNMENT_NODE);
        d_val__.components = { d_vsp__[-2], d_vsp__[0] };
        }
        break;

        case 30:
#line 166 "parser.y"
        { d_val__ = true; }
        break;

        case 37:
#line 173 "parser.y"
        {
         d_val__ = d_vsp__[-1];
        }
        break;

        case 38:
#line 180 "parser.y"
        {
         d_val__ = node();
         d_val__.tag = STATE_NODE;
         d_val__.components.push_back(d_vsp__[-5]);
         d_val__.components.push_back(d_vsp__[-2]);
         d_val__.components.push_back(d_vsp__[0]);
        }
        break;

        case 40:
#line 192 "parser.y"
        {
         d_val__ = d_vsp__[-1];
        }
        break;

        case 42:
#line 200 "parser.y"
        {
         d_vsp__[-1].components.push_back(d_vsp__[0]);
         d_val__ = d_vsp__[-1];
        }
        break;

        case 43:
#line 208 "parser.y"
        {
         d_val__ = d_vsp__[-1];
         d_val__.tag = MATRIX_NODE;
        }
        break;

        case 45:
#line 218 "parser.y"
        {
         d_val__ = node();
         d_val__.components.push_back(d_vsp__[0]);
        }
        break;

        case 46:
#line 224 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__.components.push_back(d_vsp__[0]);
        }
        break;

        case 47:
#line 232 "parser.y"
        {
         d_val__ = node();
         d_val__.components.push_back(d_vsp__[0]);
        }
        break;

        case 48:
#line 238 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__.components.push_back(d_vsp__[0]);
        }
        break;

        case 52:
#line 251 "parser.y"
        { d_val__.set_operation(d_vsp__[-2], d_vsp__[-1].s, d_vsp__[0]); }
        break;

        case 53:
#line 254 "parser.y"
        { d_val__.set_operation(d_vsp__[-2], d_vsp__[-1].s, d_vsp__[0]); }
        break;

        case 54:
#line 257 "parser.y"
        { d_val__.set_operation(d_vsp__[-2], d_vsp__[-1].s, d_vsp__[0]); }
        break;

        case 55:
#line 260 "parser.y"
        { d_val__.set_operation(d_vsp__[-2], d_vsp__[-1].s, d_vsp__[0]); }
        break;

        case 56:
#line 262 "parser.y"
        { d_val__ = d_vsp__[-1]; }
        break;

        case 57:
#line 266 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 58:
#line 267 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 59:
#line 268 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 60:
#line 269 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 61:
#line 273 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 62:
#line 274 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 63:
#line 278 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 64:
#line 279 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 65:
#line 283 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 66:
#line 284 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

        case 73:
#line 290 "parser.y"
        { d_val__ = d_scanner.bool_value(); }
        break;

        case 74:
#line 294 "parser.y"
        { d_val__ = d_scanner.int_value(); }
        break;

        case 75:
#line 298 "parser.y"
        { d_val__ = d_scanner.real_value(); }
        break;

        case 76:
#line 302 "parser.y"
        { d_val__ = d_scanner.string_value(); }
        break;

        case 77:
#line 306 "parser.y"
        { d_val__ = d_scanner.matched(); d_val__.tag = ID_NODE; }
        break;

        case 79:
#line 311 "parser.y"
        { d_val__ = d_scanner.matched(); d_val__.tag = ID_NODE; }
        break;

        case 80:
#line 315 "parser.y"
        { d_val__ = d_scanner.matched(); }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}


// $insert namespace-close
}


